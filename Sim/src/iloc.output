Terminals which are not used

   DOUTPUT


Grammar

    0 $accept: iloc_program $end

    1 iloc_program: instruction_list
    2             | data_defs instruction_list

    3 instruction_list: instruction
    4                 | label_def instruction
    5                 | instruction_list instruction
    6                 | instruction_list label_def instruction

    7 instruction: operation
    8            | OPEN_BRACKET operation_list CLOSE_BRACKET

    9 operation_list: operation
   10               | operation SEMICOLON operation_list

   11 operation: the_opcode operand_list ARROW operand_list
   12          | the_opcode operand_list
   13          | the_opcode ARROW operand_list
   14          | the_opcode

   15 the_opcode: OPCODE

   16 operand_list: reg
   17             | reg COMMA operand_list
   18             | const
   19             | const COMMA operand_list
   20             | lbl
   21             | lbl COMMA operand_list

   22 reg: REGISTER

   23 const: NUMBER

   24 lbl: LABEL

   25 label_def: TARGET

   26 data_defs: data_defs data_def
   27          | data_def

   28 data_def: DATA_CHAR addr listofchar
   29         | DATA_INT addr listofint

   30 listofchar: listofchar charinit
   31           | charinit

   32 listofint: listofint intinit
   33          | intinit

   34 charinit: LABEL

   35 intinit: NUMBER

   36 addr: NUMBER


Terminals, with rules where they appear

$end (0) 0
error (256)
OPEN_BRACKET (258) 8
CLOSE_BRACKET (259) 8
SEMICOLON (260) 10
COMMA (261) 17 19 21
ARROW (262) 11 13
OPCODE (263) 15
DOUTPUT (264)
REGISTER (265) 22
NUMBER (266) 23 35 36
LABEL (267) 24 34
TARGET (268) 25
DATA_CHAR (269) 28
DATA_INT (270) 29


Nonterminals, with rules where they appear

$accept (16)
    on left: 0
iloc_program (17)
    on left: 1 2, on right: 0
instruction_list (18)
    on left: 3 4 5 6, on right: 1 2 5 6
instruction (19)
    on left: 7 8, on right: 3 4 5 6
operation_list (20)
    on left: 9 10, on right: 8 10
operation (21)
    on left: 11 12 13 14, on right: 7 9 10
the_opcode (22)
    on left: 15, on right: 11 12 13 14
operand_list (23)
    on left: 16 17 18 19 20 21, on right: 11 12 13 17 19 21
reg (24)
    on left: 22, on right: 16 17
const (25)
    on left: 23, on right: 18 19
lbl (26)
    on left: 24, on right: 20 21
label_def (27)
    on left: 25, on right: 4 6
data_defs (28)
    on left: 26 27, on right: 2 26
data_def (29)
    on left: 28 29, on right: 26 27
listofchar (30)
    on left: 30 31, on right: 28 30
listofint (31)
    on left: 32 33, on right: 29 32
charinit (32)
    on left: 34, on right: 30 31
intinit (33)
    on left: 35, on right: 32 33
addr (34)
    on left: 36, on right: 28 29


state 0

    0 $accept: . iloc_program $end

    OPEN_BRACKET  shift, and go to state 1
    OPCODE        shift, and go to state 2
    TARGET        shift, and go to state 3
    DATA_CHAR     shift, and go to state 4
    DATA_INT      shift, and go to state 5

    iloc_program      go to state 6
    instruction_list  go to state 7
    instruction       go to state 8
    operation         go to state 9
    the_opcode        go to state 10
    label_def         go to state 11
    data_defs         go to state 12
    data_def          go to state 13


state 1

    8 instruction: OPEN_BRACKET . operation_list CLOSE_BRACKET

    OPCODE  shift, and go to state 2

    operation_list  go to state 14
    operation       go to state 15
    the_opcode      go to state 10


state 2

   15 the_opcode: OPCODE .

    $default  reduce using rule 15 (the_opcode)


state 3

   25 label_def: TARGET .

    $default  reduce using rule 25 (label_def)


state 4

   28 data_def: DATA_CHAR . addr listofchar

    NUMBER  shift, and go to state 16

    addr  go to state 17


state 5

   29 data_def: DATA_INT . addr listofint

    NUMBER  shift, and go to state 16

    addr  go to state 18


state 6

    0 $accept: iloc_program . $end

    $end  shift, and go to state 19


state 7

    1 iloc_program: instruction_list .
    5 instruction_list: instruction_list . instruction
    6                 | instruction_list . label_def instruction

    OPEN_BRACKET  shift, and go to state 1
    OPCODE        shift, and go to state 2
    TARGET        shift, and go to state 3

    $default  reduce using rule 1 (iloc_program)

    instruction  go to state 20
    operation    go to state 9
    the_opcode   go to state 10
    label_def    go to state 21


state 8

    3 instruction_list: instruction .

    $default  reduce using rule 3 (instruction_list)


state 9

    7 instruction: operation .

    $default  reduce using rule 7 (instruction)


state 10

   11 operation: the_opcode . operand_list ARROW operand_list
   12          | the_opcode . operand_list
   13          | the_opcode . ARROW operand_list
   14          | the_opcode .

    ARROW     shift, and go to state 22
    REGISTER  shift, and go to state 23
    NUMBER    shift, and go to state 24
    LABEL     shift, and go to state 25

    $default  reduce using rule 14 (operation)

    operand_list  go to state 26
    reg           go to state 27
    const         go to state 28
    lbl           go to state 29


state 11

    4 instruction_list: label_def . instruction

    OPEN_BRACKET  shift, and go to state 1
    OPCODE        shift, and go to state 2

    instruction  go to state 30
    operation    go to state 9
    the_opcode   go to state 10


state 12

    2 iloc_program: data_defs . instruction_list
   26 data_defs: data_defs . data_def

    OPEN_BRACKET  shift, and go to state 1
    OPCODE        shift, and go to state 2
    TARGET        shift, and go to state 3
    DATA_CHAR     shift, and go to state 4
    DATA_INT      shift, and go to state 5

    instruction_list  go to state 31
    instruction       go to state 8
    operation         go to state 9
    the_opcode        go to state 10
    label_def         go to state 11
    data_def          go to state 32


state 13

   27 data_defs: data_def .

    $default  reduce using rule 27 (data_defs)


state 14

    8 instruction: OPEN_BRACKET operation_list . CLOSE_BRACKET

    CLOSE_BRACKET  shift, and go to state 33


state 15

    9 operation_list: operation .
   10               | operation . SEMICOLON operation_list

    SEMICOLON  shift, and go to state 34

    $default  reduce using rule 9 (operation_list)


state 16

   36 addr: NUMBER .

    $default  reduce using rule 36 (addr)


state 17

   28 data_def: DATA_CHAR addr . listofchar

    LABEL  shift, and go to state 35

    listofchar  go to state 36
    charinit    go to state 37


state 18

   29 data_def: DATA_INT addr . listofint

    NUMBER  shift, and go to state 38

    listofint  go to state 39
    intinit    go to state 40


state 19

    0 $accept: iloc_program $end .

    $default  accept


state 20

    5 instruction_list: instruction_list instruction .

    $default  reduce using rule 5 (instruction_list)


state 21

    6 instruction_list: instruction_list label_def . instruction

    OPEN_BRACKET  shift, and go to state 1
    OPCODE        shift, and go to state 2

    instruction  go to state 41
    operation    go to state 9
    the_opcode   go to state 10


state 22

   13 operation: the_opcode ARROW . operand_list

    REGISTER  shift, and go to state 23
    NUMBER    shift, and go to state 24
    LABEL     shift, and go to state 25

    operand_list  go to state 42
    reg           go to state 27
    const         go to state 28
    lbl           go to state 29


state 23

   22 reg: REGISTER .

    $default  reduce using rule 22 (reg)


state 24

   23 const: NUMBER .

    $default  reduce using rule 23 (const)


state 25

   24 lbl: LABEL .

    $default  reduce using rule 24 (lbl)


state 26

   11 operation: the_opcode operand_list . ARROW operand_list
   12          | the_opcode operand_list .

    ARROW  shift, and go to state 43

    $default  reduce using rule 12 (operation)


state 27

   16 operand_list: reg .
   17             | reg . COMMA operand_list

    COMMA  shift, and go to state 44

    $default  reduce using rule 16 (operand_list)


state 28

   18 operand_list: const .
   19             | const . COMMA operand_list

    COMMA  shift, and go to state 45

    $default  reduce using rule 18 (operand_list)


state 29

   20 operand_list: lbl .
   21             | lbl . COMMA operand_list

    COMMA  shift, and go to state 46

    $default  reduce using rule 20 (operand_list)


state 30

    4 instruction_list: label_def instruction .

    $default  reduce using rule 4 (instruction_list)


state 31

    2 iloc_program: data_defs instruction_list .
    5 instruction_list: instruction_list . instruction
    6                 | instruction_list . label_def instruction

    OPEN_BRACKET  shift, and go to state 1
    OPCODE        shift, and go to state 2
    TARGET        shift, and go to state 3

    $default  reduce using rule 2 (iloc_program)

    instruction  go to state 20
    operation    go to state 9
    the_opcode   go to state 10
    label_def    go to state 21


state 32

   26 data_defs: data_defs data_def .

    $default  reduce using rule 26 (data_defs)


state 33

    8 instruction: OPEN_BRACKET operation_list CLOSE_BRACKET .

    $default  reduce using rule 8 (instruction)


state 34

   10 operation_list: operation SEMICOLON . operation_list

    OPCODE  shift, and go to state 2

    operation_list  go to state 47
    operation       go to state 15
    the_opcode      go to state 10


state 35

   34 charinit: LABEL .

    $default  reduce using rule 34 (charinit)


state 36

   28 data_def: DATA_CHAR addr listofchar .
   30 listofchar: listofchar . charinit

    LABEL  shift, and go to state 35

    $default  reduce using rule 28 (data_def)

    charinit  go to state 48


state 37

   31 listofchar: charinit .

    $default  reduce using rule 31 (listofchar)


state 38

   35 intinit: NUMBER .

    $default  reduce using rule 35 (intinit)


state 39

   29 data_def: DATA_INT addr listofint .
   32 listofint: listofint . intinit

    NUMBER  shift, and go to state 38

    $default  reduce using rule 29 (data_def)

    intinit  go to state 49


state 40

   33 listofint: intinit .

    $default  reduce using rule 33 (listofint)


state 41

    6 instruction_list: instruction_list label_def instruction .

    $default  reduce using rule 6 (instruction_list)


state 42

   13 operation: the_opcode ARROW operand_list .

    $default  reduce using rule 13 (operation)


state 43

   11 operation: the_opcode operand_list ARROW . operand_list

    REGISTER  shift, and go to state 23
    NUMBER    shift, and go to state 24
    LABEL     shift, and go to state 25

    operand_list  go to state 50
    reg           go to state 27
    const         go to state 28
    lbl           go to state 29


state 44

   17 operand_list: reg COMMA . operand_list

    REGISTER  shift, and go to state 23
    NUMBER    shift, and go to state 24
    LABEL     shift, and go to state 25

    operand_list  go to state 51
    reg           go to state 27
    const         go to state 28
    lbl           go to state 29


state 45

   19 operand_list: const COMMA . operand_list

    REGISTER  shift, and go to state 23
    NUMBER    shift, and go to state 24
    LABEL     shift, and go to state 25

    operand_list  go to state 52
    reg           go to state 27
    const         go to state 28
    lbl           go to state 29


state 46

   21 operand_list: lbl COMMA . operand_list

    REGISTER  shift, and go to state 23
    NUMBER    shift, and go to state 24
    LABEL     shift, and go to state 25

    operand_list  go to state 53
    reg           go to state 27
    const         go to state 28
    lbl           go to state 29


state 47

   10 operation_list: operation SEMICOLON operation_list .

    $default  reduce using rule 10 (operation_list)


state 48

   30 listofchar: listofchar charinit .

    $default  reduce using rule 30 (listofchar)


state 49

   32 listofint: listofint intinit .

    $default  reduce using rule 32 (listofint)


state 50

   11 operation: the_opcode operand_list ARROW operand_list .

    $default  reduce using rule 11 (operation)


state 51

   17 operand_list: reg COMMA operand_list .

    $default  reduce using rule 17 (operand_list)


state 52

   19 operand_list: const COMMA operand_list .

    $default  reduce using rule 19 (operand_list)


state 53

   21 operand_list: lbl COMMA operand_list .

    $default  reduce using rule 21 (operand_list)
